<canvas id="myCanvas" width="700" height="350"></canvas>
<script>

    // Get the canvas element and its 2d context
    var canvas = document.getElementById("myCanvas");
    var ctx = canvas.getContext("2d");

    const current_page = {
		"type":"current_page","x":200,"y":150,"title":"Decision Tree","subcatg":"Supervised","catg":"MLearning","link":"/"};
    const related_pages = [
        {"type":"related","x":250,"y":280,"title":"Random Forest","subcatg":"Supervised","catg":"MLearning","link":"/"},
        {"type":"related","x":350,"y":280,"title":"Decision Tree","subcatg":"Algorithms","catg":"MLearning","link":"/"},
    ];
	const practice_pages = [
        {"type":"notebook","x":200,"y":220,"title":"Notebook","catg":"Github","link":"/"},
		{"type":"code","x":150,"y":320,"title":"Example1","catg":"Github","link":"/"},
		{"type":"code","x":50,"y":320,"title":"Example2","catg":"Github","link":"/"},
    ];
    const subcategories = [
        {"type":"subcatg","x":200,"y":50,"title":"Supervised","subcatg":"Supervised","catg":"MLearning"},
        {"type":"subcatg","x":400,"y":70,"title":"Algorithms","subcatg":"Algorithms","catg":"MLearning"},
    ];

	var pages = []
	pages = pages.concat(related_pages);
	pages = pages.concat(current_page);
	pages = pages.concat(practice_pages);

    class Node {
        constructor (type, x, y, title, subcatg, catg, link) {
			this.type = type;
            this.x = x;
            this.y = y;
            this.title = title;
            this.subcatg = subcatg;
            this.catg = catg;
			this.link = link;
        }
    }

    class Graph {
        constructor() {
            this.nodes = [];
            this.edges = [];
        }
        addNode(node) {
            this.nodes.push(node);
        }
		addEdge(startNode, endNode, strokeStyle ) {
			this.edges.push({ start: startNode, end: endNode, color: strokeStyle });
		}
    }

    const graph = new Graph();

    // Add subcategories nodes
    for (let i=0; i<subcategories.length; i++) { 
		subcatgNode = new Node(
			'subcatg',
            subcategories[i].x, 
			subcategories[i].y, 
			subcategories[i].title, 
			subcategories[i].subcatg, 
			subcategories[i].catg
        );
		graph.addNode(subcatgNode);
    }

	// Add pages nodes
	for (let i=0; i<pages.length; i++) {   
		pageNode = new Node(
			pages[i].type,
            pages[i].x, 
			pages[i].y, 
			pages[i].title, 
			pages[i].subcatg, 
			pages[i].catg,
			pages[i].link
        );
		graph.addNode(pageNode);
    }
	
	// Add edges
	for (let i=0; i<graph.nodes.length; i++) {
		startNode = graph.nodes[i];

		for (let j=0; j<graph.nodes.length; j++) {
			endNode = graph.nodes[j];

			// Add edges from subcategories
			if (startNode.subcatg == endNode.subcatg) {
				if (['subcatg','current_page'].includes(startNode.type)) {
					graph.addEdge(startNode, endNode, "#999");
				}
			}
			
			// Add edges from current page
			if (startNode.type == 'current_page') {
				if (['notebook', 'related', 'code'].includes(endNode.type)) {
					graph.addEdge(startNode, endNode, "#f87431");
				}
			}
		}
	}

    //console.log(graph);

    // Draw edges as lines between nodes
    for (var i = 0; i < graph.edges.length; i++) {
        let startNode = graph.edges[i].start;
        let endNode = graph.edges[i].end;
		let strokeStyle = graph.edges[i].color;
		
        ctx.beginPath();
        ctx.moveTo(startNode.x, startNode.y);
        ctx.lineTo(endNode.x, endNode.y);
        ctx.strokeStyle = strokeStyle;
        ctx.stroke();
    }

    // Draw nodes as circles with titles
    for (var i = 0; i < graph.nodes.length; i++) {
        var node = graph.nodes[i];
        ctx.beginPath();
        ctx.arc(node.x, node.y, 15, 0, 2 * Math.PI);

        ctx.fillStyle = node.type == 'current_page' ? "#f87431" : "#FFF"; // different color for current node
        ctx.fillStyle = node.type != 'current_page' && node.link ? "#ccc" : ctx.fillStyle;
        ctx.fillStyle = node.type == 'notebook' ? '#3EB489' : ctx.fillStyle; // is notebook node
		ctx.fillStyle = node.type == 'code' ? '#3EB489' : ctx.fillStyle; // is code node

        ctx.fill();
        ctx.strokeStyle = "#666";
        ctx.stroke();

        // Draw the node title
        ctx.fillStyle = "#666";
        ctx.font = "12px Arial"; // Set the desired font size and font family
        ctx.textAlign = "center";

		if (node.type == 'current_page') {
			ctx.fillText("Connections", node.x - 55, node.y + 5);
		} else {
			ctx.fillText(node.title, node.x, node.y + 30);
		}

        if (node.link == undefined) {
            ctx.fillStyle = "#999";
            ctx.fillText(node.catg, node.x, node.y + 45);
        }
    }

</script>